events { }

stream {

}

http {
    # Logging to stdout and stderr (Docker's logging driver)
    access_log /dev/stdout;
    error_log /dev/stderr warn;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Upstream definitions
    upstream site_servers {
        server site:80;
    }

    upstream backend_servers {
        server backend:4200;
    }

    server {

        server_name _;

        # SSL ---------------------------
        listen 443 ssl;
        ssl_certificate     /etc/letsencrypt/live/nasa.hackerloft.ie/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/nasa.hackerloft.ie/privkey.pem;

        # certbot challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # docker swarm healthcheck ---> return 200
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        location / {
            proxy_pass http://site_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

             # Do NOT strip cache-related headers
            proxy_pass_request_headers on;
        }

        # Cached images
        location /epic/images {
            root /var/www/cache;
            try_files $uri @backend_image;
        }

        location @backend_image {
            rewrite ^/epic/images/(.*)$ /api/v1/epic/images/$1 break;

            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location ~ /api/v1 {
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header  X-Forwarded-For $remote_addr;
            proxy_set_header  X-Real-IP       $remote_addr;
            proxy_cache_bypass $http_upgrade;
        }
    }

    server {
        # redirect from http to https
       listen 80;
       server_name _;
       return 301 https://$host$request_uri;
    }
}
